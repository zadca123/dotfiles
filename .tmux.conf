# change prefix key (avoid ctrl+a conflicts with gnu screen, emacs)
unbind-key C-a
set-option -g prefix C-a

# goto last used window
bind-key C-a last-window
bind-key -r n next-window
bind-key -r N previous-window
bind-key -r p previous-window

# activate mouse
set -g mouse on 
# set-option -g mouse-select-pane on

# reload config
bind-key r source-file ~/.tmux.conf \; display-message "Configuration reloaded"

# clear screen and scrollback history
bind-key C-l send-keys C-l \; run 'tmux clear-history'

# edit config
bind-key e new-window -n 'conf' 'nvim ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'

# use vim as copy mode
bind-key v capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "vim-copymode" '$SHELL -c "nvim /tmp/tmux-buffer"'

# nested tmux session prefix key (gnu screen style)
bind-key a send-prefix

# fix delay time between tmux & vim
set-option -sg escape-time 0

# default shell
set-option -g default-command /bin/zsh
set-option -g default-shell /bin/zsh

# set display timelimit
set-option -g display-panes-time 2000
set-option -g display-time 1000

# history size
set-option -g history-limit 20000

# enable shell hotkeys C-left/C-right
# http://sigizmund.com/tmux-and-c-leftc-right/
set-window-option -g xterm-keys on

# enable 256 color terminal
# http://blog.sanctum.geek.nz/256-colour-terminals/
set-option -g default-terminal "screen-256color"

# vim keys in command prompt
set-option -g status-keys vi

# unicode
# set-window-option -g utf8 on

# select panes
bind-key k select-pane -U
bind-key h select-pane -L
bind-key j select-pane -D
bind-key l select-pane -R

# cycle windows/panes (no prefix)
# bind-key -n M-k select-pane -t :.-	# prev pane (Alt+k conflicts with weechat)
bind-key -n M-o select-pane -t :.+ \; resize-pane -Z	# next pane in zoomed mode
bind-key -n M-j select-pane -t :.+	# next pane
bind-key -n M-h select-window -t :-	# previous window
bind-key -n M-l select-window -t :+	# next window

# resize panes
bind-key -r J resize-pane -D 1
bind-key -r K resize-pane -U 1
bind-key -r H resize-pane -L 1
bind-key -r L resize-pane -R 1

# split pane (tmux 1.9+)
bind-key \\ split-window -h -c "#{pane_current_path}"	# vertical split (default prefix-%)
bind-key - split-window -v -c "#{pane_current_path}"	# horizontal split (default prefix-")

# split full window (tmux 2.3+)
bind-key | split-window -fh -c "#{pane_current_path}"
bind-key _ split-window -fv -c "#{pane_current_path}"

# new window with the current path (tmux 1.9+)
bind-key c new-window -c "#{pane_current_path}"

# kill window/pane without confirmation
# http://unix.stackexchange.com/a/30283
bind-key & kill-window
bind-key x kill-pane

# sync panes; send what you are typing to other panes.
# bind-key C-s set-window-option synchronize-panes

#}}}
#-------- Copy Mode (Vim Style) {{{
#------------------------------------------------------
# This section of hotkeys mainly work in copy mode and no where else

# vim keys in copy and choose mode
set-window-option -g mode-keys vi

# copying selection vim style
# http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
# https://github.com/myfreeweb/dotfiles/blob/master/tmux.conf
# bind-key Escape copy-mode			# default key: prefix [
# bind-key p paste-buffer				# default key: prefix ] ; interactively clipboard history key: prefix = 
bind-key + delete-buffer \; display-message "Deleted current Tmux Clipboard History"

# default tmux interactively clipboard history key: prefix = 
# bind-key = choose-buffer 			# tmux clipboard history (use Ctrl+s to search string)

# clear delete all paste buffer at once interactively (aka tmux clipboard) [credit: nicm from #tmux irc]
# C-b = C-t D

# clear all paste buffer via cli
# while tmux delete-buffer; do :; done

# send to tmux clipboard or system clipboard
bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "copy to tmux clipboard"
bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "copy to system clipboard"

# set the current tmux version (use this variable on if-shell commands)
# run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -c 6-)"
run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -c 6- | tr -d '[A-Z][a-z]')" # remove alphabets e.g 2.9a ==> 2.9 only

# vim copy mode rebinds for (tmux 2.4+)
# https://shapeshed.com/custom-vim-bindings-in-tmux-2-4/
# https://github.com/tmux/tmux/issues/754#issuecomment-303156000
# https://stackoverflow.com/a/40902312
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  'bind-key -T copy-mode-vi v send-keys -X begin-selection; \
  bind-key -T copy-mode-vi V send-keys -X select-line; \
  bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle; \
  bind-key -T choice-mode-vi h send-keys -X tree-collapse ; \
  bind-key -T choice-mode-vi l send-keys -X tree-expand ; \
  bind-key -T choice-mode-vi H send-keys -X tree-collapse-all ; \
  bind-key -T choice-mode-vi L send-keys -X tree-expand-all ; \
  bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"; \
  bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"'

# google search the selected text (requires: surfraw, browser: e.g w3m)
# bind-key -T copy-mode-vi 'u' send -X copy-selection \; run-shell 'tmux show-buffer | xsel -i -b' \; new-window -n gsearch \; send-keys -t gsearch 'sr google "$(xsel -b)" && tmux kill-window' 'Enter'

# read and write and delete paste buffer ( xsel method)
# https://wiki.archlinux.org/index.php/Tmux#ICCCM_Selection_Integration
# ctrl+shift+v

# bind-key < command-prompt -p "copy to tmux (hit enter to confirm):" "run-shell 'tmux set-buffer -- \"$(xsel -o -b)\"'"
# bind-key > command-prompt -p "copy to xsel (hit enter to confirm):" "run-shell 'tmux show-buffer | xsel -i -b'"
# bind-key < run-shell tmux set-buffer -- \"$(xsel -o -b)\" \; display-message "Copy To Tmux Clipboard"
# bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"; tmux paste-buffer" \; display-message "Copied from system clipboard"

# https://github.com/wincent/wincent/blob/aa3a322e3a911dabe0ef398ebb1fd7c77209b8ac/roles/dotfiles/files/.tmux.conf
# https://www.youtube.com/watch?v=N0RL_J0LT9A
# Clipper.
# bind-key y run-shell "tmux save-buffer - | nc -U ~/.clipper.sock"
#
# # "copy-pipe" requires tmux >= 1.8
# bind-key -t vi-copy Enter copy-pipe "nc -U ~/.clipper.sock"

# enable PageUp/Down as copy mode
# if in ncurses app (vim,nano ..etc) then functions as normal
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
# bind-key -T copy-mode-vi PPage page-up
# bind-key -T copy-mode-vi NPage page-down

# bind-key -t vi-copy PPage page-up
# bind-key -t vi-copy NPage page-down



# bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
# bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
# bind-key -t vi-copy WheelUpPane halfpage-up
# bind-key -t vi-copy WheelDownPane halfpage-down



# demo: https://www.youtube.com/watch?v=N0RL_J0LT9A
# source: https://github.com/wincent/wincent/blob/aa3a322e3a911dabe0ef398ebb1fd7c77209b8ac/roles/dotfiles/files/.tmux.conf
# Mouse can be used to select panes, select windows (by clicking on the status
# bar), resize panes. For default bindings see `tmux list-keys` and `tmux
# list-keys -t vi-copy`.
# set -g mouse on

# Restore pre-2.1 behavior of scrolling with the scrollwheel in Vim, less, copy
# mode etc, otherwise entering copy mode if not already in it.
bind-key -T root WheelUpPane \
  if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'
bind-key -T root WheelDownPane \
  if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# }}}
#-------- Window / Pane Settings {{{
#------------------------------------------------------
# start window/pane index on 1 instead of 0
# set-option -g base-index 1
# set-window-option -g pane-base-index 1

# pane divider color; non active pane
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
  'set-option -g pane-border-fg green; \
  set-option -g pane-border-bg black'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
  'set-option -g pane-border-style fg=green,bg=black'

# pane divider color; active pane
# helps when you have more than two panes.
# version 1.8 makes it easy to see 2 panes now
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
  'set-option -g pane-active-border-fg white; \
  set-option -g pane-active-border-bg magenta'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
  'set-option -g pane-active-border-style fg=white,bg=magenta'


# ask user to input window number they wish to swap with
# references: https://stackoverflow.com/questions/33396831/how-to-force-tmux-to-wait-for-output-from-command-prompt

# join pane to window/session
# source: https://www.reddit.com/r/commandline/comments/8wv0w6/interactively_moving_panes_to_other_windows/
# bind-key W choose-tree -Zw "swap-window -t '%%'"
bind-key P choose-tree -Zw "swap-pane -t '%%'"
# bind-key C-w choose-tree -Zw "move-window -t '%%'"
bind-key C-p choose-tree -Zw "move-pane -t '%%'"

bind-key C-M-w command-prompt -p "Swap Current Window To? (e.g 3; 4; session_name:5)" "swap-window -t '%%'"
bind-key C-M-p command-prompt -p "Swap Current Pane To? (e.g 2.0; session_name:4.0)" "swap-pane -t '%%'"
bind-key M-p command-prompt -p "Move Current Pane To? (e.g 3.1; session_name:6.0)" "move-pane -t '%%'"


# @Zeraphel via Steam
# swap panes around
bind-key -r -T prefix C-M-k select-pane -U \; swap-pane -t !
bind-key -r -T prefix C-M-j select-pane -D \; swap-pane -t !
bind-key -r -T prefix C-M-h select-pane -L \; swap-pane -t !
bind-key -r -T prefix C-M-l select-pane -R \; swap-pane -t !

### join-pane -t 2 moves the current pane to window 2 of the current session
### join-pane -t net-pers:2 moves the current pane to window 2 of a session called net-pers
### join-pane -s net-pers:2.1 moves the second (because panes are 0-indexed) pane of window 2 of session net-pers below the current panel
### join-pane -t 3.2 moves the current pane after the third pane of window 3 of the current session.



# swap windows
bind-key -n M-Left swap-window -t -1
bind-key -n M-Right swap-window -t +1
# bind-key -n M-Up swap-pane -U     # alt+up   interferences with weechat
# bind-key -n M-Down swap-pane -D   # alt+down interferences with weechat

# auto renumber windows sequentially
# https://github.com/thoughtbot/dotfiles/blob/master/tmux.conf
set-option -g renumber-windows on

# set auto rename of windows base on command
# set-window-option -g automatic-rename on
# note: ohmyzsh users commet out DISABLE_AUTO_TITLE=true from zshrc to disable autorename
# http://superuser.com/questions/306028/tmux-and-zsh-custom-prompt-bug-with-window-name

#}}}
#-------- Statusbar {{{
#------------------------------------------------------
# stuff for the statusbar broken down into right, left and center

# UTF-8 character support in the status bar
# set-option -g status-utf8 on

# refresh the status bar every 1 second.
set-option -g status-interval 1

# Time messages remain in the status bar. Lower this number
# if this is too distracting.
set-option -g display-time 4000

# command/message line colors
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
  'set-option -g message-fg white; \
  set-option -g message-bg black; \
  set-option -g message-attr bright'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
  'set-option -g message-style fg=white,bg=black,bright'

# CENTER {{{
# Symbol    Meaning ================================
#      *    Denotes the current window.
#      -    Marks the last window (previously selected).
#      #    Window is monitored and activity has been detected.
#      !    A bell has occurred in the window.
#      ~    The window has been silent for the monitor-silence interval.
#      M    The window contains the marked pane.
#      Z    The window's active pane is zoomed.

# monitor changes on non-focus window (activity symbol = #)
# (e.g 1:zsh  2:zsh  3:torr# 4:im- 5:chat# 6:fm# 7:conf*)
set-window-option -g monitor-activity on

# displays a message at the bottom when activity is detected (e.g Activity in Window 5)
# requires: monitor-activity on
# set-option -g visual-activity off

# bell colors (bell symbol = !)
# to simulate a bell alert use: sleep 3 && echo -e "\a"
set-window-option -g window-status-bell-style 'fg=black,bg=colour5,bright'

# statusbar colors
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
  'set-option -g status-fg white; \
  set-option -g status-bg black; \
  set-option -g status-attr default'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
  'set-option -g status-style fg=white,bg=black,default'

# window title colors; non active
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
  'set-window-option -g window-status-fg cyan; \
  set-window-option -g window-status-bg default; \
  set-window-option -g window-status-attr dim'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
  'set-window-option -g window-status-style fg=cyan,bg=default,dim'

# window title colors; active
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' \
  'set-window-option -g window-status-current-fg white; \
  set-window-option -g window-status-current-bg red; \
  set-window-option -g window-status-current-attr bright'
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
  'set-window-option -g window-status-current-style fg=white,bg=red,bright'

#}}}
# LEFT SIDE {{{
set-option -g status-justify centre
set-option -g status-left-length 40
set-option -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"

#}}}
# RIGHT SIDE {{{
# use "man date" to set the clock to your liking
set-option -g status-right "#[fg=blue]#(~/battery Discharging) | #[fg=cyan]%a %D %l:%M:%p"

#}}}


#}}}
#-------- External Scripts {{{
#------------------------------------------------------

# Run command on idle; screensaver
# demo video: http://www.youtube.com/watch?v=s0T82aJn1DQ
# set-option -g lock-after-time 10000
# set-option -g lock-command "/usr/bin/cmatrix -C blue"
# set-option -g lock-command "/usr/bin/asciiquarium"

#}}}
#-------- Layout {{{
#------------------------------------------------------
# demo video: http://www.youtube.com/watch?v=sxw-n5Du600
# http://amjith.blogspot.com/2011/08/scripting-tmux-layouts.html
# http://unix.stackexchange.com/a/17118
# -v = split horizontal
# -h = split veritical

# 1
bind-key W new-window -n Web -c $HOME \; \
  send-keys -t Web 'elinks' 'Enter'

# 2
bind-key T new-window -n BitTorrent -c $HOME \; \
  send-keys -t BitTorrent 'rtorrent' 'Enter' \; \
  split-window -t BitTorrent -v \; \
  resize-pane -t BitTorrent -D 10 \; \
  send-keys -t BitTorrent "nnn $TORRENTS/rtorrent/.loads" 'Enter'
  # send-keys -t BitTorrent 'vifm ~/Torrents ~/Torrents' 'Enter' \; \
  # split-window -t BitTorrent -h \; \
  # send-keys -t BitTorrent 'stig' 'Enter'

#3
bind-key M new-window -n Music -c $HOME \; \
  send-keys -t Music 'cmus' 'Enter' \; \
  split-window -t Music -h \; \
  resize-pane -t Music -R 10 \; \
  send-keys -t Music 'cover-refresh.sh' 'Enter' \; \
  split-window -t Music -fv \; \
  resize-pane -t Music -D 20 \; \
  send-keys -t Music 'cava' 'Enter' 'Right' 'f' 'f' 'f'

#4
bind-key F9 new-window -n Email -c $HOME \; \
  send-keys -t Email 'aerc' 'Enter'

#5
bind-key F11 new-window -n System -c $HOME \; \
  send-keys -t System 'bpytop' 'Enter'

#6
bind-key F12 new-window -n Qalc -c $HOME \; \
  send-keys -t Qalc 'qalc' 'Enter'

#7 
bind-key V new-window -n Vifm -c $HOME \; \
  send-keys -t Vifm 'vifm' 'Enter'

#8 
bind-key N new-window -n NNN -c $HOME \; \
  send-keys -t NNN 'nnn -S' 'Enter' ';;' \; \
  send-keys -t NNN 't'

#8 
bind-key u new-window -n Update -c $HOME \; \
  send-keys -t Update 'package-manager.sh' 'Enter'
